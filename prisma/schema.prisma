generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  role           UserRole
  isVip          Boolean?  @default(false)
  expiredVipDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Payment        Payment[]
}

model Kol {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  name        String
  image       String
  age         Int?
  phone       String?
  salary      Int?
  status      Boolean?
  gender      Gender?
  location    Location?
  industries  Industry[]
  platforms   Platform[]
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Company {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  name        String
  image       String
  platforms   Platform[]
  locations   Location[]
  phone       String?
  addresses   String[]
  description String?
  campaigns   Campaign[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Campaign {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  companyId   String     @db.ObjectId
  title       String
  expiredDate DateTime
  status      Boolean
  minAge      Int
  maxAge      Int
  minSalary   Int
  maxSalary   Int
  image       String
  industry    Industry
  locations   Location[]
  genders     Gender[]
  platforms   Platform[]
  description String
  benefit     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Package {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  numberOfMonth Int    @unique
  price         Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Payment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  accountId String @db.ObjectId
  packageId String @db.ObjectId
  price     Int
  bank      String

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  kol
  company
}

enum Gender {
  male
  female
  lgbt
}

enum Location {
  hcm
  hn
  dn
}

enum Industry {
  food
  clothes
  cosmetology
  accessory
}

enum Platform {
  facebook
  youtube
  instagram
  tiktok
  shopee
}
